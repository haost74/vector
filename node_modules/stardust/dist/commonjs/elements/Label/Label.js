'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lib = require('../../lib');

var _ = require('../');

var _LabelDetail = require('./LabelDetail');

var _LabelDetail2 = _interopRequireDefault(_LabelDetail);

var _LabelGroup = require('./LabelGroup');

var _LabelGroup2 = _interopRequireDefault(_LabelGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A label displays content classification
 */
function Label(props) {
  var attached = props.attached;
  var basic = props.basic;
  var children = props.children;
  var circular = props.circular;
  var className = props.className;
  var color = props.color;
  var content = props.content;
  var corner = props.corner;
  var detail = props.detail;
  var empty = props.empty;
  var floating = props.floating;
  var horizontal = props.horizontal;
  var icon = props.icon;
  var image = props.image;
  var onClick = props.onClick;
  var onRemove = props.onRemove;
  var pointing = props.pointing;
  var removable = props.removable;
  var ribbon = props.ribbon;
  var size = props.size;
  var tag = props.tag;


  var handleClick = function handleClick(e) {
    return onClick && onClick(e, props);
  };
  var handleRemove = function handleRemove(e) {
    return onRemove && onRemove(e, props);
  };

  var pointingClass = pointing === true && 'pointing' || (pointing === 'left' || pointing === 'right') && pointing + ' pointing' || (pointing === 'above' || pointing === 'below') && 'pointing ' + pointing;

  var classes = (0, _classnames2.default)('ui', color, pointingClass, size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(empty, 'empty'), (0, _lib.useKeyOnly)(floating, 'floating'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(image === true, 'image'), (0, _lib.useKeyOnly)(tag, 'tag'), (0, _lib.useKeyOrValueAndKey)(corner, 'corner'), (0, _lib.useKeyOrValueAndKey)(ribbon, 'ribbon'), (0, _lib.useValueAndKey)(attached, 'attached'), 'label', className);

  var ElementType = (0, _lib.getElementType)(Label, props);
  var rest = (0, _lib.getUnhandledProps)(Label, props);

  if (children) {
    return _react2.default.createElement(
      ElementType,
      _extends({}, rest, { className: classes, onClick: handleClick }),
      children
    );
  }

  return _react2.default.createElement(
    ElementType,
    _extends({ className: classes, onClick: handleClick }, rest),
    _.Icon.create(icon),
    typeof image !== 'boolean' && _.Image.create(image),
    content,
    (0, _lib.createShorthand)(_LabelDetail2.default, function (val) {
      return { content: val };
    }, detail),
    (removable || onRemove) && _react2.default.createElement(_.Icon, { name: 'delete', onClick: handleRemove })
  );
}

Label._meta = {
  name: 'Label',
  type: _lib.META.TYPES.ELEMENT,
  props: {
    attached: ['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right'],
    color: _lib.SUI.COLORS,
    corner: ['left', 'right'],
    pointing: ['above', 'below', 'left', 'right'],
    ribbon: ['right'],
    size: _lib.SUI.SIZES
  }
};

Label.propTypes = {
  /** An element type to render as (string or function). */
  as: _lib.customPropTypes.as,

  /** A label can attach to a content segment. */
  attached: _react.PropTypes.oneOf(Label._meta.props.attached),

  /** A label can reduce its complexity. */
  basic: _react.PropTypes.bool,

  /** Primary content of the label, same as content. */
  children: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['content', 'detail', 'icon']), _react.PropTypes.node]),

  /** A label can be circular. */
  circular: _react.PropTypes.bool,

  /** Classes to add to the label className. */
  className: _react.PropTypes.string,

  /** Color of the label. */
  color: _react.PropTypes.oneOf(Label._meta.props.color),

  /** Shorthand for primary content of the label. Mutually exclusive with children. */
  content: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])]),

  /** A label can position itself in the corner of an element. */
  corner: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf(Label._meta.props.corner)]),

  /** Shorthand for the LabelDetail component. Mutually exclusive with children. */
  detail: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])]),

  /** Formats the label as a dot. */
  empty: _lib.customPropTypes.every([_lib.customPropTypes.demand(['circular']), _react.PropTypes.bool]),

  /** Float above another element in the upper right corner. */
  floating: _react.PropTypes.bool,

  /** A horizontal label is formatted to label content along-side it horizontally. */
  horizontal: _react.PropTypes.bool,

  /** A label can be formatted to emphasize an icon or prop can be used as shorthand for Icon. */
  icon: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])]),

  /** A label can be formatted to emphasize an image or prop can be used as shorthand for Image. */
  image: _lib.customPropTypes.every([_lib.customPropTypes.givenProps({ children: _react.PropTypes.node.isRequired }, _react.PropTypes.bool), _lib.customPropTypes.givenProps({ image: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element, _react.PropTypes.object]) }, _lib.customPropTypes.disallow(['children']))]),

  /** A label can point to content next to it. */
  pointing: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf(Label._meta.props.pointing)]),

  /** Adds the link style when present, called with (event, props). */
  onClick: _react.PropTypes.func,

  /** Adds an "x" icon, called with (event, props) when "x" is clicked. */
  onRemove: _react.PropTypes.func,

  /** Add an "x" icon that calls onRemove when clicked. */
  removable: _react.PropTypes.bool,

  /** A label can appear as a ribbon attaching itself to an element. */
  ribbon: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf(Label._meta.props.ribbon)]),

  /** A label can have different sizes. */
  size: _react.PropTypes.oneOf(Label._meta.props.size),

  /** A label can appear as a tag. */
  tag: _react.PropTypes.bool
};

Label.create = (0, _lib.createShorthandFactory)(Label, function (value) {
  return { content: value };
});
Label.Detail = _LabelDetail2.default;
Label.Group = _LabelGroup2.default;

exports.default = Label;